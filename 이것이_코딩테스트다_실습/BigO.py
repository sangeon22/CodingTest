# 빅오 표기법
# 0(1) 상수시간
# O(logN) 로그시간
# O(N) 선형시간
# O(NlogN) 로그 선형 시간
# O(n**2)이차 시간
# O(n**3)삼차 시간
# O(2**n)지수 시간

# 1. 시간 복잡도 계산 - N 개의 데이터의 합
arr = [3, 5, 1, 2, 4]
total = 0

for i in arr:
    total += i

print(total)
# 수행 시간은 데이터 개수 N에 비례 -> O(N) 선형 시간


# 2. 시간 복잡도 계산 2 - 2중 반복문을 이용하는 예제
for i in arr:
    for j in arr:
        temp = i * j
        print(temp)
# 시간 복잡도 -> O(N**2)
# + 모든 2중 반복문이 O(N**2)는 아님
# + 코드에서 내부적으로 다른 함수 호출 시, 그 함수의 시간 복잡도도 고려해야함


# 3. 알고리즘 설계 Tip
# 통상적으로 연산 횟수 5억 이상 시, Python 5~15초 시간 소요
# ex) O(N**3) 알고리즘 설계 시 N >= 5000이면? 1250억
# 1초에 5천만번 수행 가정하면 2500초 소요
# 통상 1초 ~ 5초 내로 설계해야 통과


# 4. 요구사항 알고리즘 설계
# 가장 먼저 시간제한(수행시간 요구사항)
# ex) 시간 제한이 1초인 문제(일반적인 기준)
# N의 범위가 500인 경우: O(N**3)
# N의 범위가 2000인 경우: O(N**2)
# N의 범위가 100,000인 경우: O(NlogN)
# N의 범위가 10,000,000인 경우: O(N)
# 스스로 감잡아나가기!!

# 5 일반적인 알괴즘 문제 해결 과정
#  1) 지문 읽기 및 컴퓨터적 사고
#  2) 요구사항(복잡도) 분석 (중요!)
#  3) 문제 해결을 위한 아이디어 찾기
#  4) 소스코드 설계 및 코딩
# 바로 코드 작성 습관 버리기!! 이건 실무에서도 마찬가지 인듯
# 핵심 아이디어 캐치 후 설계 후 코딩

# 6. 수행 시간 측정 소스코드 예제

import time

start_time = time.time()

# ~~ 소스코드

end_time = time.time()
print("수행시간: ", end_time - start_time)
